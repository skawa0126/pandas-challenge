
# Dependencies and Setup
import pandas as pd
from pathlib import Path
# File to Load (Remember to Change These)
school_data_to_load = Path("PyCitySchools/Resources/schools_complete.csv")
student_data_to_load = Path("PyCitySchools/Resources/students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()
# Calculate the total number of unique schools
school_count = school_data_complete['school_name'].nunique()
school_count
# Calculate the total number of students
student_count = len(school_data_complete)
student_count
# Calculate the total budget
total_budget = school_data_complete['budget'].unique()
total_budget.sum()
# Calculate the average (mean) math score
average_math_score = school_data_complete['math_score'].mean()
average_math_score

# Calculate the average (mean) reading score
average_reading_score = school_data_complete['reading_score'].mean()
average_reading_score

# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage

# Calculate the percentage of students who passed reading (hint: look at how the math percentage was calculated)
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage


# Use the following to calculate the percentage of students that passed math and reading
passing_math_reading_count = school_data_complete[
    (school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)
].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100
overall_passing_rate

# Create a high-level snapshot of the district's key metrics in a DataFrame
district_summary_data = {
    "Total Schools": [school_count], 
    "Total Students": [student_count], 
    "Total Budget": [total_budget.sum()],
    "Average math score": [average_math_score],
    "Average reading score": [average_reading_score],
    "% passing math": [passing_math_percentage],
    "% passing reading": [passing_reading_percentage],
    "% overall passing": [overall_passing_rate]
}

district_summary = pd.DataFrame(district_summary_data)
district_summary
# Formatting
district_summary["Total Students"] = district_summary["Total Students"].map("{:,}".format)
district_summary["Total Budget"] = district_summary["Total Budget"].map("${:,.2f}".format)
# Display the DataFrame
district_summary

# Use the code provided to select the type per school from school_data
school_types = school_data.set_index(["school_name"])["type"]
school_types = pd.DataFrame(school_data)
school_types
# Calculate the total student count per school from school_data
per_school_counts = school_data['size']
per_school_budget
# Calculate the total school budget and per capita spending per school from school_data
per_school_budget = school_types['budget']
per_school_capita = per_school_budget/per_school_counts

school_types["Total budget per student"] = per_school_capita
school_types.head()
# Calculate the total school budget and per capita spending per school from school_data
per_school_budget = school_data['budget']
per_school_capita = per_school_budget/per_school_counts

school_data["Total budget per student"] = per_school_capita
school_data.head()
# Calculate the average test scores per school from school_data_complete
school_name_type = school_data_complete.groupby(["School ID"])
per_school_math = pd.DataFrame(school_name_type[["math_score"]].mean())
per_school_reading = pd.DataFrame(school_name_type[["reading_score"]].mean())

school_data["Average Math Score"] = per_school_math
school_data["Average Reading Score"] = per_school_reading
school_data.head()
# Calculate the number of students per school with math scores of 70 or higher from school_data_complete
students_passing_math = school_data_complete[(school_data_complete["math_score"] >= 70)]
school_students_passing_math = students_passing_math.groupby(["School ID"]).size()
# Calculate the number of students per school with reading scores of 70 or higher from school_data_complete
students_passing_reading = school_data_complete[(school_data_complete["reading_score"] >= 70)]
school_students_passing_reading = students_passing_reading.groupby(["School ID"]).size()
# Use the provided code to calculate the number of students per school that passed both math and reading with scores of 70 or higher
students_passing_math_and_reading = school_data_complete[
    (school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)
]
school_students_passing_math_and_reading = students_passing_math_and_reading.groupby(["School ID"]).size()

# Use the provided code to calculate the passing rates
per_school_passing_math = (school_students_passing_math / per_school_counts) * 100
per_school_passing_reading = school_students_passing_reading / per_school_counts * 100
overall_passing_rate = school_students_passing_math_and_reading / per_school_counts * 100
# Create a DataFrame called `per_school_summary` with columns for the calculations above.
per_school_summary = pd.DataFrame(school_data)

per_school_summary["% Passing Math"] = per_school_passing_math
per_school_summary["% Passing Reading"] = per_school_passing_reading
per_school_summary["% Overall Passing"] = overall_passing_rate

# Display the DataFrame
per_school_summary
# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_schools = per_school_summary.sort_values(by=['% Overall Passing'], ascending=False)
top_schools.head(5)
# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_schools = per_school_summary.sort_values(by=['% Overall Passing'])
bottom_schools.head(5)
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the `math_score` column for each.
ninth_graders_by_school = ninth_graders.groupby(["school_name"])
ninth_graders_math_scores = pd.DataFrame(ninth_graders_by_school[["math_score"]].mean())

tenth_graders_by_school = tenth_graders.groupby(["school_name"])
tenth_graders_math_scores = pd.DataFrame(tenth_graders_by_school[["math_score"]].mean())

eleventh_graders_by_school = eleventh_graders.groupby(["school_name"])
eleventh_graders_math_scores = pd.DataFrame(eleventh_graders_by_school[["math_score"]].mean())

twelfth_graders_by_school = twelfth_graders.groupby(["school_name"])
twelfth_graders_math_scores = pd.DataFrame(twelfth_graders_by_school[["math_score"]].mean())
# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
math_scores_by_grade = pd.DataFrame(ninth_graders_math_scores)
math_scores_by_grade["10th grade"] = tenth_graders_math_scores
math_scores_by_grade["11th grade"] = eleventh_graders_math_scores
math_scores_by_grade["12th grade"] = twelfth_graders_math_scores
math_scores_by_grade.rename(columns={'math_score': '9th grade'}, inplace=True)
# Display the DataFrame
math_scores_by_grade

# Minor data wrangling
math_scores_by_grade.index.name = None
math_scores_by_grade
# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the the `reading_score` column for each.
ninth_graders_by_school = ninth_graders.groupby(["school_name"])
ninth_grade_reading_scores = pd.DataFrame(ninth_graders_by_school[["reading_score"]].mean())

tenth_graders_by_school = tenth_graders.groupby(["school_name"])
tenth_grader_reading_scores = pd.DataFrame(tenth_graders_by_school[["reading_score"]].mean())

eleventh_graders_by_school = eleventh_graders.groupby(["school_name"])
eleventh_grader_reading_scores = pd.DataFrame(eleventh_graders_by_school[["reading_score"]].mean())

twelfth_graders_by_school = twelfth_graders.groupby(["school_name"])
twelfth_grader_reading_scores = pd.DataFrame(twelfth_graders_by_school[["reading_score"]].mean())

# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade = pd.DataFrame(ninth_grade_reading_scores)
reading_scores_by_grade["10th"] = tenth_grader_reading_scores
reading_scores_by_grade["11th"] = eleventh_grader_reading_scores
reading_scores_by_grade["12th"] = twelfth_grader_reading_scores

reading_scores_by_grade.rename(columns={'reading_score': '9th'}, inplace=True)

reading_scores_by_grade
# Minor data wrangling
reading_scores_by_grade = reading_scores_by_grade[["9th", "10th", "11th", "12th"]]
reading_scores_by_grade.index.name = None

# Display the DataFrame
reading_scores_by_grade
## Scores by School Spending
# Establish the bins
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]

# Create a copy of the school summary since it has the "Per Student Budget"
school_spending_df = per_school_summary.copy()

# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(x=per_school_summary['Total budget per student'], bins=spending_bins,
                    labels=labels)
school_spending_df
#  Calculate averages for the desired columns.
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Math Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Reading Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Overall Passing"].mean()
# Create a DataFrame called `spending_summary =` that breaks down school performance based on spending
spending_summary = pd.DataFrame(spending_math_scores)
spending_summary["Average Reading Score"] = spending_reading_scores
spending_summary["% Passing math"] = spending_passing_math
spending_summary["% Passing reading"] = spending_passing_reading
spending_summary["% Overall passing"] = overall_passing_spending
spending_summary
# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.
per_school_summary["School Size"] =pd.cut(x=per_school_summary['size'], bins=size_bins,
                    labels=labels)
per_school_summary
# Calculate averages for the desired columns.
size_math_scores = per_school_summary.groupby(["School Size"])["Average Math Score"].mean()
size_reading_scores = per_school_summary.groupby(["School Size"])["Average Reading Score"].mean()
size_passing_math = per_school_summary.groupby(["School Size"])["% Passing Math"].mean()
size_passing_reading = per_school_summary.groupby(["School Size"])["% Passing Reading"].mean()
size_overall_passing = per_school_summary.groupby(["School Size"])["% Overall Passing"].mean()

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
size_summary = pd.DataFrame(size_math_scores)
size_summary["Average Reading Score"] = size_reading_scores
size_summary["% Passing math"] = size_passing_math
size_summary["% Passing reading"] = size_passing_reading
size_summary["% Overall passing"] = size_overall_passing
size_summary
# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the the `reading_score` column for each.
ninth_graders_by_school = ninth_graders.groupby(["school_name"])
ninth_grade_reading_scores = pd.DataFrame(ninth_graders_by_school[["reading_score"]].mean())

tenth_graders_by_school = tenth_graders.groupby(["school_name"])
tenth_grader_reading_scores = pd.DataFrame(tenth_graders_by_school[["reading_score"]].mean())

eleventh_graders_by_school = eleventh_graders.groupby(["school_name"])
eleventh_grader_reading_scores = pd.DataFrame(eleventh_graders_by_school[["reading_score"]].mean())

twelfth_graders_by_school = twelfth_graders.groupby(["school_name"])
twelfth_grader_reading_scores = pd.DataFrame(twelfth_graders_by_school[["reading_score"]].mean())
# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade = pd.DataFrame(ninth_grade_reading_scores)
reading_scores_by_grade["10th"] = tenth_grader_reading_scores
reading_scores_by_grade["11th"] = eleventh_grader_reading_scores
reading_scores_by_grade["12th"] = twelfth_grader_reading_scores
reading_scores_by_grade.rename(columns={'reading_score': '9th'}, inplace=True)

reading_scores_by_grade
# Display results
size_summary

# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = per_school_summary.groupby(["type"])["Average Math Score"].mean()
average_reading_score_by_type = per_school_summary.groupby(["type"])["Average Reading Score"].mean()
average_percent_passing_math_by_type = per_school_summary.groupby(["type"])["% Passing Math"].mean()
average_percent_passing_reading_by_type = per_school_summary.groupby(["type"])["% Passing Reading"].mean()
average_percent_overall_passing_by_type = per_school_summary.groupby(["type"])["% Overall Passing"].mean()

# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.DataFrame(average_math_score_by_type)
type_summary["Average Reading Score"] = average_reading_score_by_type
type_summary["% Passing math"] = average_percent_passing_math_by_type
type_summary["% Passing reading"] = average_percent_passing_reading_by_type
type_summary["% Overall passing"] = average_percent_overall_passing_by_type

# Display results
type_summary
